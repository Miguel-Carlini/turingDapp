{"ast":null,"code":"var _jsxFileName = \"/home/miguel/Documentos/moddApptut/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Button } from \"@/components/ui/button\"; //, Card, CardContent, Input, Select, SelectItem } from \"@/components/ui\";\n\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"; // Endereço do contrato\n\nconst contractABI = TokenArtifact.abi;\nexport default function TuringDapp() {\n  _s();\n\n  const [provider, setProvider] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [codename, setCodename] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [ranking, setRanking] = useState([]);\n  useEffect(() => {\n    if (window.ethereum) {\n      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n      setProvider(web3Provider);\n      setSigner(web3Provider.getSigner());\n      setContract(new ethers.Contract(contractAddress, contractABI, web3Provider.getSigner()));\n    }\n  }, []);\n  useEffect(() => {\n    if (contract) {\n      contract.on(\"VoteCast\", (voter, amount) => {\n        console.log(`Vote lançado por ${voter}: ${amount} Turings`);\n        updateRanking();\n      });\n    }\n  }, [contract]);\n\n  const issueToken = async () => {\n    if (contract) {\n      const tx = await contract.issueToken(codename, ethers.utils.parseUnits(amount, 18));\n      await tx.wait();\n    }\n  };\n\n  const vote = async () => {\n    if (contract) {\n      const tx = await contract.vote(codename, ethers.utils.parseUnits(amount, 18));\n      await tx.wait();\n    }\n  };\n\n  const votingOn = async () => {\n    if (contract) {\n      const tx = await contract.votingOn();\n      await tx.wait();\n    }\n  };\n\n  const votingOff = async () => {\n    if (contract) {\n      const tx = await contract.votingOff();\n      await tx.wait();\n    }\n  };\n\n  const updateRanking = async () => {\n    if (contract) {\n      // Simulação de pooling\n      const users = [\n        /* Lista de usuários */\n      ];\n      const balances = await Promise.all(users.map(user => contract.balanceOf(user)));\n      const ranked = users.map((user, i) => ({\n        user,\n        balance: balances[i]\n      })).sort((a, b) => b.balance - a.balance);\n      setRanking(ranked);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-3xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-4\",\n          children: \"Turing Voting DApp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          onValueChange: setCodename,\n          children: [/*#__PURE__*/_jsxDEV(SelectItem, {\n            value: \"Codinome1\",\n            children: \"Codinome1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SelectItem, {\n            value: \"Codinome2\",\n            children: \"Codinome2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Quantidade de Turings\",\n          onChange: e => setAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: issueToken,\n          children: \"Emitir Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: vote,\n          children: \"Votar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: votingOn,\n          children: \"Ativar Vota\\xE7\\xE3o\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: votingOff,\n          children: \"Desativar Vota\\xE7\\xE3o\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold\",\n        children: \"Ranking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: ranking.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [entry.user, \": \", ethers.utils.formatUnits(entry.balance, 18), \" Turings\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n/*\nimport { ethers } from 'ethers'\nimport { useState } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\"\nconst tokenAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n\nconst localBlockchainAddress = 'http://localhost:8545'\n\nfunction App() {\n    const [tokenData, setTokenData] = useState({})\n    const [amount, setAmount] = useState()\n\n    const provider = new ethers.providers.JsonRpcProvider(localBlockchainAddress)\n    const signer = provider.getSigner();\n\n    async function _intializeContract(init) {\n        const contract = new ethers.Contract(\n            tokenAddress,\n            TokenArtifact.abi,\n            init\n        );\n\n        return contract\n    }\n\n    async function _getTokenData() {\n        const contract = await _intializeContract(signer)\n\n        const name = await contract.name();\n        const symbol = await contract.symbol();\n        const tokenData = { name, symbol }\n\n        setTokenData(tokenData);\n    }\n\n    async function getBalance() {\n        if (typeof window.ethereum !== 'undefined') {\n            const contract = await _intializeContract(signer)\n            const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n            const balance = await contract.balanceOf(account);\n            console.log(\"Account Balance: \", balance.toString());\n        }\n    }\n\n    async function issueToken() {\n        const contract = await _intializeContract(signer)\n        await contract.functions.issueToken(amount)\n        console.log('Issue token successfull')\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={issueToken}>issueToken</button>\n                <br />\n                <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n                <br />\n                <button onClick={_getTokenData}>get token data</button>\n                <br />\n                <button onClick={getBalance}>Get Balance</button>\n                <br />\n                <h1>{tokenData.name}</h1>\n                <h1>{tokenData.symbol}</h1>\n            </header>\n        </div>\n    );\n}\n\nexport default App;*/\n\n_s(TuringDapp, \"8e5xext0c00iGpjjCwlO7XBUXKQ=\");\n\n_c = TuringDapp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TuringDapp\");","map":{"version":3,"sources":["/home/miguel/Documentos/moddApptut/src/App.js"],"names":["useEffect","useState","ethers","Button","TokenArtifact","contractAddress","contractABI","abi","TuringDapp","provider","setProvider","contract","setContract","signer","setSigner","codename","setCodename","amount","setAmount","ranking","setRanking","window","ethereum","web3Provider","providers","Web3Provider","getSigner","Contract","on","voter","console","log","updateRanking","issueToken","tx","utils","parseUnits","wait","vote","votingOn","votingOff","users","balances","Promise","all","map","user","balanceOf","ranked","i","balance","sort","a","b","e","target","value","entry","index","formatUnits"],"mappings":"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AAiBD,KAAK,CAACX,IAAvB,QAA+B5C,MAAM,CAACiC,KAAP,CAAawB,WAAb,CAAyBF,KAAK,CAACP,OAA/B,EAAwC,EAAxC,CAA/B;AAAA,WAASQ,KAAT;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAjKwBlD,U;;KAAAA,U","sourcesContent":["import './App.css';\n\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Button } from \"@/components/ui/button\"\n//, Card, CardContent, Input, Select, SelectItem } from \"@/components/ui\";\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\"\n\nconst contractAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"; // Endereço do contrato\nconst contractABI = TokenArtifact.abi;\n\nexport default function TuringDapp() {\n    const [provider, setProvider] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [codename, setCodename] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const [ranking, setRanking] = useState([]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n            setProvider(web3Provider);\n            setSigner(web3Provider.getSigner());\n            setContract(new ethers.Contract(contractAddress, contractABI, web3Provider.getSigner()));\n        }\n    }, []);\n\n    useEffect(() => {\n        if (contract) {\n            contract.on(\"VoteCast\", (voter, amount) => {\n                console.log(`Vote lançado por ${voter}: ${amount} Turings`);\n                updateRanking();\n            });\n        }\n    }, [contract]);\n\n    const issueToken = async () => {\n        if (contract) {\n            const tx = await contract.issueToken(codename, ethers.utils.parseUnits(amount, 18));\n            await tx.wait();\n        }\n    };\n\n    const vote = async () => {\n        if (contract) {\n            const tx = await contract.vote(codename, ethers.utils.parseUnits(amount, 18));\n            await tx.wait();\n        }\n    };\n\n    const votingOn = async () => {\n        if (contract) {\n            const tx = await contract.votingOn();\n            await tx.wait();\n        }\n    };\n\n    const votingOff = async () => {\n        if (contract) {\n            const tx = await contract.votingOff();\n            await tx.wait();\n        }\n    };\n\n    const updateRanking = async () => {\n        if (contract) {\n            // Simulação de pooling\n            const users = [/* Lista de usuários */];\n            const balances = await Promise.all(users.map(user => contract.balanceOf(user)));\n            const ranked = users.map((user, i) => ({ user, balance: balances[i] }))\n                .sort((a, b) => b.balance - a.balance);\n            setRanking(ranked);\n        }\n    };\n\n    return (\n        <div className=\"p-6 max-w-3xl mx-auto\">\n            <Card>\n                <CardContent>\n                    <h2 className=\"text-xl font-bold mb-4\">Turing Voting DApp</h2>\n                    <Select onValueChange={setCodename}>\n                        <SelectItem value=\"Codinome1\">Codinome1</SelectItem>\n                        <SelectItem value=\"Codinome2\">Codinome2</SelectItem>\n                    </Select>\n                    <Input placeholder=\"Quantidade de Turings\" onChange={e => setAmount(e.target.value)} />\n                    <Button onClick={issueToken}>Emitir Token</Button>\n                    <Button onClick={vote}>Votar</Button>\n                    <Button onClick={votingOn}>Ativar Votação</Button>\n                    <Button onClick={votingOff}>Desativar Votação</Button>\n                </CardContent>\n            </Card>\n            <div className=\"mt-6\">\n                <h3 className=\"text-lg font-semibold\">Ranking</h3>\n                <ul>\n                    {ranking.map((entry, index) => (\n                        <li key={index}>{entry.user}: {ethers.utils.formatUnits(entry.balance, 18)} Turings</li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\n/*\nimport { ethers } from 'ethers'\nimport { useState } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\"\nconst tokenAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n\nconst localBlockchainAddress = 'http://localhost:8545'\n\nfunction App() {\n    const [tokenData, setTokenData] = useState({})\n    const [amount, setAmount] = useState()\n\n    const provider = new ethers.providers.JsonRpcProvider(localBlockchainAddress)\n    const signer = provider.getSigner();\n\n    async function _intializeContract(init) {\n        const contract = new ethers.Contract(\n            tokenAddress,\n            TokenArtifact.abi,\n            init\n        );\n\n        return contract\n    }\n\n    async function _getTokenData() {\n        const contract = await _intializeContract(signer)\n\n        const name = await contract.name();\n        const symbol = await contract.symbol();\n        const tokenData = { name, symbol }\n\n        setTokenData(tokenData);\n    }\n\n    async function getBalance() {\n        if (typeof window.ethereum !== 'undefined') {\n            const contract = await _intializeContract(signer)\n            const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n            const balance = await contract.balanceOf(account);\n            console.log(\"Account Balance: \", balance.toString());\n        }\n    }\n\n    async function issueToken() {\n        const contract = await _intializeContract(signer)\n        await contract.functions.issueToken(amount)\n        console.log('Issue token successfull')\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={issueToken}>issueToken</button>\n                <br />\n                <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n                <br />\n                <button onClick={_getTokenData}>get token data</button>\n                <br />\n                <button onClick={getBalance}>Get Balance</button>\n                <br />\n                <h1>{tokenData.name}</h1>\n                <h1>{tokenData.symbol}</h1>\n            </header>\n        </div>\n    );\n}\n\nexport default App;*/\n"]},"metadata":{},"sourceType":"module"}