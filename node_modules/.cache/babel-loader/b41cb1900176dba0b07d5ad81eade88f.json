{"ast":null,"code":"var _jsxFileName = \"/home/miguel/Documentos/moddApptut/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"; // Endereço do contrato\n\nconst contractABI = TokenArtifact.abi;\nexport default function TuringDapp() {\n  _s();\n\n  const [contract, setContract] = useState(null);\n  const [codename, setCodename] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [ranking, setRanking] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [account, setAccount] = useState(null); // Estado para armazenar a conta conectada\n  // Função para conectar ao MetaMask\n\n  const connectMetaMask = async () => {\n    if (window.ethereum) {\n      try {\n        // Solicita ao usuário que conecte sua conta MetaMask\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = web3Provider.getSigner();\n        setAccount(accounts[0]); // Define a conta conectada\n\n        setContract(new ethers.Contract(contractAddress, contractABI, signer)); // Cria a instância do contrato\n      } catch (error) {\n        console.error(\"Erro ao conectar ao MetaMask:\", error);\n        alert(\"Falha ao conectar ao MetaMask. Tente novamente.\");\n      }\n    } else {\n      console.error(\"MetaMask não encontrado. Instale o MetaMask.\");\n      alert(\"MetaMask não encontrado. Instale o MetaMask.\");\n    }\n  };\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = web3Provider.getSigner();\n      setContract(new ethers.Contract(contractAddress, contractABI, signer));\n    } else {\n      console.error(\"Ethereum wallet não detectada. Instale o MetaMask.\");\n    }\n  }, []);\n  const updateRanking = useCallback(async () => {\n    if (contract) {\n      try {\n        // Substituir getAllUsers por uma outra abordagem, ou adicionar a função no contrato\n        const users = await contract.getAllUsers(); // Certifique-se de que essa função existe no contrato!\n\n        const balances = await Promise.all(users.map(user => contract.balanceOf(user)));\n        const ranked = users.map((user, i) => ({\n          user,\n          balance: balances[i]\n        })).sort((a, b) => b.balance - a.balance);\n        setRanking(ranked);\n      } catch (error) {\n        console.error(\"Erro ao atualizar ranking:\", error);\n      }\n    }\n  }, [contract]);\n  useEffect(() => {\n    if (contract) {\n      const handleVoteCast = (voter, amount) => {\n        console.log(`Voto lançado por ${voter}: ${amount} Turings`);\n        updateRanking();\n      };\n\n      contract.off(\"VotoEmitido\", handleVoteCast); // Remover listener antigo\n\n      contract.on(\"VotoEmitido\", handleVoteCast);\n      return () => contract.off(\"VotoEmitido\", handleVoteCast);\n    }\n  }, [contract, updateRanking]);\n\n  const issueToken = async () => {\n    if (contract) {\n      try {\n        setLoading(true);\n        const tx = await contract.issueToken(codename, ethers.utils.parseUnits(amount, 18));\n        await tx.wait();\n        alert(\"Token emitido com sucesso!\");\n      } catch (error) {\n        console.error(\"Erro ao emitir token:\", error);\n        alert(\"Falha ao emitir token. Verifique seu saldo e tente novamente.\");\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const vote = async () => {\n    if (contract) {\n      try {\n        setLoading(true);\n        const tx = await contract.vote(codename, ethers.utils.parseUnits(amount, 18));\n        await tx.wait();\n        alert(\"Voto registrado com sucesso!\");\n      } catch (error) {\n        console.error(\"Erro ao votar:\", error);\n        alert(\"Falha ao votar. Verifique seu saldo e tente novamente.\");\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const votingOn = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.votingOn();\n        await tx.wait();\n        alert(\"Votação ativada!\");\n      } catch (error) {\n        console.error(\"Erro ao ativar votação:\", error);\n      }\n    }\n  };\n\n  const votingOff = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.votingOff();\n        await tx.wait();\n        alert(\"Votação desativada!\");\n      } catch (error) {\n        console.error(\"Erro ao desativar votação:\", error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-3xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Turing Token DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Codename\",\n        value: codename,\n        onChange: e => setCodename(e.target.value),\n        className: \"p-2 border rounded w-full mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Quantidade\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"p-2 border rounded w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: issueToken,\n        className: \"px-4 py-2 bg-blue-500 text-white rounded\",\n        disabled: loading,\n        children: loading ? \"Emitindo...\" : \"Emitir Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: vote,\n        className: \"px-4 py-2 bg-green-500 text-white rounded\",\n        disabled: loading,\n        children: loading ? \"Votando...\" : \"Votar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: votingOn,\n        className: \"px-4 py-2 bg-yellow-500 text-white rounded\",\n        children: \"Ativar Vota\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: votingOff,\n        className: \"px-4 py-2 bg-red-500 text-white rounded\",\n        children: \"Desativar Vota\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold\",\n        children: \"Ranking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: ranking.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [entry.user, \": \", ethers.utils.formatUnits(entry.balance, 18), \" Turings\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n/*\n\n<Card>\n    <CardContent>\n        <h2 className=\"text-xl font-bold mb-4\">Turing Voting DApp</h2>\n        <Select onValueChange={setCodename}>\n            <SelectItem value=\"Codinome1\">Codinome1</SelectItem>\n            <SelectItem value=\"Codinome2\">Codinome2</SelectItem>\n        </Select>\n        <Input placeholder=\"Quantidade de Turings\" onChange={e => setAmount(e.target.value)} />\n        <Button onClick={issueToken}>Emitir Token</Button>\n        <Button onClick={vote}>Votar</Button>\n        <Button onClick={votingOn}>Ativar Votação</Button>\n        <Button onClick={votingOff}>Desativar Votação</Button>\n    </CardContent>\n</Card>\n\n\nimport { ethers } from 'ethers'\nimport { useState } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\"\nconst tokenAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n\nconst localBlockchainAddress = 'http://localhost:8545'\n\nfunction App() {\n    const [tokenData, setTokenData] = useState({})\n    const [amount, setAmount] = useState()\n\n    const provider = new ethers.providers.JsonRpcProvider(localBlockchainAddress)\n    const signer = provider.getSigner();\n\n    async function _intializeContract(init) {\n        const contract = new ethers.Contract(\n            tokenAddress,\n            TokenArtifact.abi,\n            init\n        );\n\n        return contract\n    }\n\n    async function _getTokenData() {\n        const contract = await _intializeContract(signer)\n\n        const name = await contract.name();\n        const symbol = await contract.symbol();\n        const tokenData = { name, symbol }\n\n        setTokenData(tokenData);\n    }\n\n    async function getBalance() {\n        if (typeof window.ethereum !== 'undefined') {\n            const contract = await _intializeContract(signer)\n            const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n            const balance = await contract.balanceOf(account);\n            console.log(\"Account Balance: \", balance.toString());\n        }\n    }\n\n    async function issueToken() {\n        const contract = await _intializeContract(signer)\n        await contract.functions.issueToken(amount)\n        console.log('Issue token successfull')\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={issueToken}>issueToken</button>\n                <br />\n                <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n                <br />\n                <button onClick={_getTokenData}>get token data</button>\n                <br />\n                <button onClick={getBalance}>Get Balance</button>\n                <br />\n                <h1>{tokenData.name}</h1>\n                <h1>{tokenData.symbol}</h1>\n            </header>\n        </div>\n    );\n}\n\nexport default App;*/\n\n_s(TuringDapp, \"iQuYX1+NEcr443VHTqo/2j1yY3U=\");\n\n_c = TuringDapp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TuringDapp\");","map":{"version":3,"sources":["/home/miguel/Documentos/moddApptut/src/App.js"],"names":["useEffect","useState","useCallback","ethers","TokenArtifact","contractAddress","contractABI","abi","TuringDapp","contract","setContract","codename","setCodename","amount","setAmount","ranking","setRanking","loading","setLoading","account","setAccount","connectMetaMask","window","ethereum","accounts","request","method","web3Provider","providers","Web3Provider","signer","getSigner","Contract","error","console","alert","updateRanking","users","getAllUsers","balances","Promise","all","map","user","balanceOf","ranked","i","balance","sort","a","b","handleVoteCast","voter","log","off","on","issueToken","tx","utils","parseUnits","wait","vote","votingOn","votingOff","e","target","value","entry","index","formatUnits"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\";\n\nconst contractAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"; // Endereço do contrato\nconst contractABI = TokenArtifact.abi;\n\nexport default function TuringDapp() {\n    const [contract, setContract] = useState(null);\n    const [codename, setCodename] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const [ranking, setRanking] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [account, setAccount] = useState(null); // Estado para armazenar a conta conectada\n\n    // Função para conectar ao MetaMask\n    const connectMetaMask = async () => {\n        if (window.ethereum) {\n            try {\n                // Solicita ao usuário que conecte sua conta MetaMask\n                const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n                const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n                const signer = web3Provider.getSigner();\n                setAccount(accounts[0]); // Define a conta conectada\n                setContract(new ethers.Contract(contractAddress, contractABI, signer)); // Cria a instância do contrato\n            } catch (error) {\n                console.error(\"Erro ao conectar ao MetaMask:\", error);\n                alert(\"Falha ao conectar ao MetaMask. Tente novamente.\");\n            }\n        } else {\n            console.error(\"MetaMask não encontrado. Instale o MetaMask.\");\n            alert(\"MetaMask não encontrado. Instale o MetaMask.\");\n        }\n    };\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = web3Provider.getSigner();\n            setContract(new ethers.Contract(contractAddress, contractABI, signer));\n        } else {\n            console.error(\"Ethereum wallet não detectada. Instale o MetaMask.\");\n        }\n    }, []);\n\n    const updateRanking = useCallback(async () => {\n        if (contract) {\n            try {\n                // Substituir getAllUsers por uma outra abordagem, ou adicionar a função no contrato\n                const users = await contract.getAllUsers(); // Certifique-se de que essa função existe no contrato!\n                const balances = await Promise.all(users.map(user => contract.balanceOf(user)));\n\n                const ranked = users.map((user, i) => ({\n                    user,\n                    balance: balances[i]\n                })).sort((a, b) => b.balance - a.balance);\n\n                setRanking(ranked);\n            } catch (error) {\n                console.error(\"Erro ao atualizar ranking:\", error);\n            }\n        }\n    }, [contract]);\n\n    useEffect(() => {\n        if (contract) {\n            const handleVoteCast = (voter, amount) => {\n                console.log(`Voto lançado por ${voter}: ${amount} Turings`);\n                updateRanking();\n            };\n\n            contract.off(\"VotoEmitido\", handleVoteCast); // Remover listener antigo\n            contract.on(\"VotoEmitido\", handleVoteCast);\n\n            return () => contract.off(\"VotoEmitido\", handleVoteCast);\n        }\n    }, [contract, updateRanking]);\n\n    const issueToken = async () => {\n        if (contract) {\n            try {\n                setLoading(true);\n                const tx = await contract.issueToken(codename, ethers.utils.parseUnits(amount, 18));\n                await tx.wait();\n                alert(\"Token emitido com sucesso!\");\n            } catch (error) {\n                console.error(\"Erro ao emitir token:\", error);\n                alert(\"Falha ao emitir token. Verifique seu saldo e tente novamente.\");\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    const vote = async () => {\n        if (contract) {\n            try {\n                setLoading(true);\n                const tx = await contract.vote(codename, ethers.utils.parseUnits(amount, 18));\n                await tx.wait();\n                alert(\"Voto registrado com sucesso!\");\n            } catch (error) {\n                console.error(\"Erro ao votar:\", error);\n                alert(\"Falha ao votar. Verifique seu saldo e tente novamente.\");\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    const votingOn = async () => {\n        if (contract) {\n            try {\n                const tx = await contract.votingOn();\n                await tx.wait();\n                alert(\"Votação ativada!\");\n            } catch (error) {\n                console.error(\"Erro ao ativar votação:\", error);\n            }\n        }\n    };\n\n    const votingOff = async () => {\n        if (contract) {\n            try {\n                const tx = await contract.votingOff();\n                await tx.wait();\n                alert(\"Votação desativada!\");\n            } catch (error) {\n                console.error(\"Erro ao desativar votação:\", error);\n            }\n        }\n    };\n\n    return (\n        <div className=\"p-6 max-w-3xl mx-auto\">\n            <h2 className=\"text-2xl font-bold mb-4\">Turing Token DApp</h2>\n\n            <div className=\"mb-4\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Codename\"\n                    value={codename}\n                    onChange={(e) => setCodename(e.target.value)}\n                    className=\"p-2 border rounded w-full mb-2\"\n                />\n                <input\n                    type=\"text\"\n                    placeholder=\"Quantidade\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    className=\"p-2 border rounded w-full\"\n                />\n            </div>\n\n            <div className=\"flex flex-wrap gap-4\">\n                <button onClick={issueToken} className=\"px-4 py-2 bg-blue-500 text-white rounded\" disabled={loading}>\n                    {loading ? \"Emitindo...\" : \"Emitir Token\"}\n                </button>\n                <button onClick={vote} className=\"px-4 py-2 bg-green-500 text-white rounded\" disabled={loading}>\n                    {loading ? \"Votando...\" : \"Votar\"}\n                </button>\n                <button onClick={votingOn} className=\"px-4 py-2 bg-yellow-500 text-white rounded\">\n                    Ativar Votação\n                </button>\n                <button onClick={votingOff} className=\"px-4 py-2 bg-red-500 text-white rounded\">\n                    Desativar Votação\n                </button>\n            </div>\n\n            <div className=\"mt-6\">\n                <h3 className=\"text-lg font-semibold\">Ranking</h3>\n                <ul>\n                    {ranking.map((entry, index) => (\n                        <li key={index}>\n                            {entry.user}: {ethers.utils.formatUnits(entry.balance, 18)} Turings\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\n\n\n/*\n\n<Card>\n    <CardContent>\n        <h2 className=\"text-xl font-bold mb-4\">Turing Voting DApp</h2>\n        <Select onValueChange={setCodename}>\n            <SelectItem value=\"Codinome1\">Codinome1</SelectItem>\n            <SelectItem value=\"Codinome2\">Codinome2</SelectItem>\n        </Select>\n        <Input placeholder=\"Quantidade de Turings\" onChange={e => setAmount(e.target.value)} />\n        <Button onClick={issueToken}>Emitir Token</Button>\n        <Button onClick={vote}>Votar</Button>\n        <Button onClick={votingOn}>Ativar Votação</Button>\n        <Button onClick={votingOff}>Desativar Votação</Button>\n    </CardContent>\n</Card>\n\n\nimport { ethers } from 'ethers'\nimport { useState } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\"\nconst tokenAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n\nconst localBlockchainAddress = 'http://localhost:8545'\n\nfunction App() {\n    const [tokenData, setTokenData] = useState({})\n    const [amount, setAmount] = useState()\n\n    const provider = new ethers.providers.JsonRpcProvider(localBlockchainAddress)\n    const signer = provider.getSigner();\n\n    async function _intializeContract(init) {\n        const contract = new ethers.Contract(\n            tokenAddress,\n            TokenArtifact.abi,\n            init\n        );\n\n        return contract\n    }\n\n    async function _getTokenData() {\n        const contract = await _intializeContract(signer)\n\n        const name = await contract.name();\n        const symbol = await contract.symbol();\n        const tokenData = { name, symbol }\n\n        setTokenData(tokenData);\n    }\n\n    async function getBalance() {\n        if (typeof window.ethereum !== 'undefined') {\n            const contract = await _intializeContract(signer)\n            const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n            const balance = await contract.balanceOf(account);\n            console.log(\"Account Balance: \", balance.toString());\n        }\n    }\n\n    async function issueToken() {\n        const contract = await _intializeContract(signer)\n        await contract.functions.issueToken(amount)\n        console.log('Issue token successfull')\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={issueToken}>issueToken</button>\n                <br />\n                <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n                <br />\n                <button onClick={_getTokenData}>get token data</button>\n                <br />\n                <button onClick={getBalance}>Get Balance</button>\n                <br />\n                <h1>{tokenData.name}</h1>\n                <h1>{tokenData.symbol}</h1>\n            </header>\n        </div>\n    );\n}\n\nexport default App;*/\n"]},"metadata":{},"sourceType":"module"}