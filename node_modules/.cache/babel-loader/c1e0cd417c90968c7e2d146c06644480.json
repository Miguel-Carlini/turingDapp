{"ast":null,"code":"var _jsxFileName = \"/home/miguel/Documentos/moddApptut/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"; // Endereço do contrato\n\nconst contractABI = TokenArtifact.abi;\nexport default function TuringDapp() {\n  _s();\n\n  const [contract, setContract] = useState(null);\n  const [codename, setCodename] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [ranking, setRanking] = useState([]);\n  useEffect(() => {\n    if (window.ethereum) {\n      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = web3Provider.getSigner();\n      setContract(new ethers.Contract(contractAddress, contractABI, signer));\n    } else {\n      console.error(\"Ethereum wallet não detectada. Instale o MetaMask.\");\n    }\n  }, []);\n  const updateRanking = useCallback(async () => {\n    if (contract) {\n      try {\n        const users = await contract.getAllUsers(); // Certifique-se de que essa função existe no contrato!\n\n        const balances = await Promise.all(users.map(user => contract.balanceOf(user)));\n        const ranked = users.map((user, i) => ({\n          user,\n          balance: balances[i]\n        })).sort((a, b) => b.balance - a.balance);\n        setRanking(ranked);\n      } catch (error) {\n        console.error(\"Erro ao atualizar ranking:\", error);\n      }\n    }\n  }, [contract]);\n  useEffect(() => {\n    if (contract) {\n      const handleVoteCast = (voter, amount) => {\n        console.log(`Vote lançado por ${voter}: ${amount} Turings`);\n        updateRanking();\n      };\n\n      contract.off(\"VoteCast\", handleVoteCast); // Remove listener antigo\n\n      contract.on(\"VoteCast\", handleVoteCast);\n      return () => contract.off(\"VoteCast\", handleVoteCast);\n    }\n  }, [contract, updateRanking]);\n\n  const issueToken = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.issueToken(codename, ethers.utils.parseUnits(amount, 18));\n        await tx.wait();\n        alert(\"Token emitido com sucesso!\");\n      } catch (error) {\n        console.error(\"Erro ao emitir token:\", error);\n        alert(\"Falha ao emitir token. Verifique seu saldo e tente novamente.\");\n      }\n    }\n  };\n\n  const vote = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.vote(codename, ethers.utils.parseUnits(amount, 18));\n        await tx.wait();\n        alert(\"Voto registrado com sucesso!\");\n      } catch (error) {\n        console.error(\"Erro ao votar:\", error);\n        alert(\"Falha ao votar. Verifique seu saldo e tente novamente.\");\n      }\n    }\n  };\n\n  const votingOn = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.votingOn();\n        await tx.wait();\n        alert(\"Votação ativada!\");\n      } catch (error) {\n        console.error(\"Erro ao ativar votação:\", error);\n      }\n    }\n  };\n\n  const votingOff = async () => {\n    if (contract) {\n      try {\n        const tx = await contract.votingOff();\n        await tx.wait();\n        alert(\"Votação desativada!\");\n      } catch (error) {\n        console.error(\"Erro ao desativar votação:\", error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-3xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Turing Token DApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Codename\",\n        value: codename,\n        onChange: e => setCodename(e.target.value),\n        className: \"p-2 border rounded w-full mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Quantidade\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        className: \"p-2 border rounded w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: issueToken,\n        className: \"px-4 py-2 bg-blue-500 text-white rounded\",\n        children: \"Emitir Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: vote,\n        className: \"px-4 py-2 bg-green-500 text-white rounded\",\n        children: \"Votar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: votingOn,\n        className: \"px-4 py-2 bg-yellow-500 text-white rounded\",\n        children: \"Ativar Vota\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: votingOff,\n        className: \"px-4 py-2 bg-red-500 text-white rounded\",\n        children: \"Desativar Vota\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold\",\n        children: \"Ranking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: ranking.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [entry.user, \": \", ethers.utils.formatUnits(entry.balance, 18), \" Turings\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n/*\n\n<Card>\n    <CardContent>\n        <h2 className=\"text-xl font-bold mb-4\">Turing Voting DApp</h2>\n        <Select onValueChange={setCodename}>\n            <SelectItem value=\"Codinome1\">Codinome1</SelectItem>\n            <SelectItem value=\"Codinome2\">Codinome2</SelectItem>\n        </Select>\n        <Input placeholder=\"Quantidade de Turings\" onChange={e => setAmount(e.target.value)} />\n        <Button onClick={issueToken}>Emitir Token</Button>\n        <Button onClick={vote}>Votar</Button>\n        <Button onClick={votingOn}>Ativar Votação</Button>\n        <Button onClick={votingOff}>Desativar Votação</Button>\n    </CardContent>\n</Card>\n\n\nimport { ethers } from 'ethers'\nimport { useState } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\"\nconst tokenAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n\nconst localBlockchainAddress = 'http://localhost:8545'\n\nfunction App() {\n    const [tokenData, setTokenData] = useState({})\n    const [amount, setAmount] = useState()\n\n    const provider = new ethers.providers.JsonRpcProvider(localBlockchainAddress)\n    const signer = provider.getSigner();\n\n    async function _intializeContract(init) {\n        const contract = new ethers.Contract(\n            tokenAddress,\n            TokenArtifact.abi,\n            init\n        );\n\n        return contract\n    }\n\n    async function _getTokenData() {\n        const contract = await _intializeContract(signer)\n\n        const name = await contract.name();\n        const symbol = await contract.symbol();\n        const tokenData = { name, symbol }\n\n        setTokenData(tokenData);\n    }\n\n    async function getBalance() {\n        if (typeof window.ethereum !== 'undefined') {\n            const contract = await _intializeContract(signer)\n            const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n            const balance = await contract.balanceOf(account);\n            console.log(\"Account Balance: \", balance.toString());\n        }\n    }\n\n    async function issueToken() {\n        const contract = await _intializeContract(signer)\n        await contract.functions.issueToken(amount)\n        console.log('Issue token successfull')\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={issueToken}>issueToken</button>\n                <br />\n                <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n                <br />\n                <button onClick={_getTokenData}>get token data</button>\n                <br />\n                <button onClick={getBalance}>Get Balance</button>\n                <br />\n                <h1>{tokenData.name}</h1>\n                <h1>{tokenData.symbol}</h1>\n            </header>\n        </div>\n    );\n}\n\nexport default App;*/\n\n_s(TuringDapp, \"4z/ZFLgBk1/DQxAZ4yprpRB7XMk=\");\n\n_c = TuringDapp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TuringDapp\");","map":{"version":3,"sources":["/home/miguel/Documentos/moddApptut/src/App.js"],"names":["useEffect","useState","useCallback","ethers","TokenArtifact","contractAddress","contractABI","abi","TuringDapp","contract","setContract","codename","setCodename","amount","setAmount","ranking","setRanking","window","ethereum","web3Provider","providers","Web3Provider","signer","getSigner","Contract","console","error","updateRanking","users","getAllUsers","balances","Promise","all","map","user","balanceOf","ranked","i","balance","sort","a","b","handleVoteCast","voter","log","off","on","issueToken","tx","utils","parseUnits","wait","alert","vote","votingOn","votingOff","e","target","value","entry","index","formatUnits"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useEffect, useState, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\";\n\nconst contractAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"; // Endereço do contrato\nconst contractABI = TokenArtifact.abi;\n\nexport default function TuringDapp() {\n    const [contract, setContract] = useState(null);\n    const [codename, setCodename] = useState(\"\");\n    const [amount, setAmount] = useState(\"\");\n    const [ranking, setRanking] = useState([]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = web3Provider.getSigner();\n            setContract(new ethers.Contract(contractAddress, contractABI, signer));\n        } else {\n            console.error(\"Ethereum wallet não detectada. Instale o MetaMask.\");\n        }\n    }, []);\n\n    const updateRanking = useCallback(async () => {\n        if (contract) {\n            try {\n                const users = await contract.getAllUsers(); // Certifique-se de que essa função existe no contrato!\n                const balances = await Promise.all(users.map(user => contract.balanceOf(user)));\n\n                const ranked = users.map((user, i) => ({\n                    user,\n                    balance: balances[i]\n                })).sort((a, b) => b.balance - a.balance);\n\n                setRanking(ranked);\n            } catch (error) {\n                console.error(\"Erro ao atualizar ranking:\", error);\n            }\n        }\n    }, [contract]);\n\n    useEffect(() => {\n        if (contract) {\n            const handleVoteCast = (voter, amount) => {\n                console.log(`Vote lançado por ${voter}: ${amount} Turings`);\n                updateRanking();\n            };\n\n            contract.off(\"VoteCast\", handleVoteCast); // Remove listener antigo\n            contract.on(\"VoteCast\", handleVoteCast);\n\n            return () => contract.off(\"VoteCast\", handleVoteCast);\n        }\n    }, [contract, updateRanking]);\n\n    const issueToken = async () => {\n        if (contract) {\n            try {\n                const tx = await contract.issueToken(codename, ethers.utils.parseUnits(amount, 18));\n                await tx.wait();\n                alert(\"Token emitido com sucesso!\");\n            } catch (error) {\n                console.error(\"Erro ao emitir token:\", error);\n                alert(\"Falha ao emitir token. Verifique seu saldo e tente novamente.\");\n            }\n        }\n    };\n\n    const vote = async () => {\n        if (contract) {\n            try {\n                const tx = await contract.vote(codename, ethers.utils.parseUnits(amount, 18));\n                await tx.wait();\n                alert(\"Voto registrado com sucesso!\");\n            } catch (error) {\n                console.error(\"Erro ao votar:\", error);\n                alert(\"Falha ao votar. Verifique seu saldo e tente novamente.\");\n            }\n        }\n    };\n\n    const votingOn = async () => {\n        if (contract) {\n            try {\n                const tx = await contract.votingOn();\n                await tx.wait();\n                alert(\"Votação ativada!\");\n            } catch (error) {\n                console.error(\"Erro ao ativar votação:\", error);\n            }\n        }\n    };\n\n    const votingOff = async () => {\n        if (contract) {\n            try {\n                const tx = await contract.votingOff();\n                await tx.wait();\n                alert(\"Votação desativada!\");\n            } catch (error) {\n                console.error(\"Erro ao desativar votação:\", error);\n            }\n        }\n    };\n\n    return (\n        <div className=\"p-6 max-w-3xl mx-auto\">\n            <h2 className=\"text-2xl font-bold mb-4\">Turing Token DApp</h2>\n\n            <div className=\"mb-4\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Codename\"\n                    value={codename}\n                    onChange={(e) => setCodename(e.target.value)}\n                    className=\"p-2 border rounded w-full mb-2\"\n                />\n                <input\n                    type=\"text\"\n                    placeholder=\"Quantidade\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    className=\"p-2 border rounded w-full\"\n                />\n            </div>\n\n            <div className=\"flex flex-wrap gap-4\">\n                <button onClick={issueToken} className=\"px-4 py-2 bg-blue-500 text-white rounded\">\n                    Emitir Token\n                </button>\n                <button onClick={vote} className=\"px-4 py-2 bg-green-500 text-white rounded\">\n                    Votar\n                </button>\n                <button onClick={votingOn} className=\"px-4 py-2 bg-yellow-500 text-white rounded\">\n                    Ativar Votação\n                </button>\n                <button onClick={votingOff} className=\"px-4 py-2 bg-red-500 text-white rounded\">\n                    Desativar Votação\n                </button>\n            </div>\n\n            <div className=\"mt-6\">\n                <h3 className=\"text-lg font-semibold\">Ranking</h3>\n                <ul>\n                    {ranking.map((entry, index) => (\n                        <li key={index}>\n                            {entry.user}: {ethers.utils.formatUnits(entry.balance, 18)} Turings\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\n\n/*\n\n<Card>\n    <CardContent>\n        <h2 className=\"text-xl font-bold mb-4\">Turing Voting DApp</h2>\n        <Select onValueChange={setCodename}>\n            <SelectItem value=\"Codinome1\">Codinome1</SelectItem>\n            <SelectItem value=\"Codinome2\">Codinome2</SelectItem>\n        </Select>\n        <Input placeholder=\"Quantidade de Turings\" onChange={e => setAmount(e.target.value)} />\n        <Button onClick={issueToken}>Emitir Token</Button>\n        <Button onClick={vote}>Votar</Button>\n        <Button onClick={votingOn}>Ativar Votação</Button>\n        <Button onClick={votingOff}>Desativar Votação</Button>\n    </CardContent>\n</Card>\n\n\nimport { ethers } from 'ethers'\nimport { useState } from 'react';\nimport TokenArtifact from \"./artifacts/contracts/TuringToken.sol/TuringToken.json\"\nconst tokenAddress = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n\nconst localBlockchainAddress = 'http://localhost:8545'\n\nfunction App() {\n    const [tokenData, setTokenData] = useState({})\n    const [amount, setAmount] = useState()\n\n    const provider = new ethers.providers.JsonRpcProvider(localBlockchainAddress)\n    const signer = provider.getSigner();\n\n    async function _intializeContract(init) {\n        const contract = new ethers.Contract(\n            tokenAddress,\n            TokenArtifact.abi,\n            init\n        );\n\n        return contract\n    }\n\n    async function _getTokenData() {\n        const contract = await _intializeContract(signer)\n\n        const name = await contract.name();\n        const symbol = await contract.symbol();\n        const tokenData = { name, symbol }\n\n        setTokenData(tokenData);\n    }\n\n    async function getBalance() {\n        if (typeof window.ethereum !== 'undefined') {\n            const contract = await _intializeContract(signer)\n            const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n            const balance = await contract.balanceOf(account);\n            console.log(\"Account Balance: \", balance.toString());\n        }\n    }\n\n    async function issueToken() {\n        const contract = await _intializeContract(signer)\n        await contract.functions.issueToken(amount)\n        console.log('Issue token successfull')\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <button onClick={issueToken}>issueToken</button>\n                <br />\n                <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n                <br />\n                <button onClick={_getTokenData}>get token data</button>\n                <br />\n                <button onClick={getBalance}>Get Balance</button>\n                <br />\n                <h1>{tokenData.name}</h1>\n                <h1>{tokenData.symbol}</h1>\n            </header>\n        </div>\n    );\n}\n\nexport default App;*/\n"]},"metadata":{},"sourceType":"module"}